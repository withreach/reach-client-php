<?php
/**
 * Session
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reach's Drop-In API
 *
 * API definition for Reach's Drop-In API's
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Session Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Session implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Session';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'session_id' => 'string',
'state' => 'string',
'merchant_reference' => 'string',
'currency' => 'string',
'total_amount' => 'float',
'items' => '\Swagger\Client\Model\Item[]',
'auto_capture' => 'bool',
'complete_url' => 'string',
'cancel_url' => 'string',
'via_agent' => 'bool',
'billing_profile_id' => 'string',
'billing_profile_reference' => 'string',
'billing_profile' => 'AllOfSessionBillingProfile',
'shipping_details' => 'AllOfSessionShippingDetails',
'tax_amount' => 'float',
'order' => 'AllOfSessionOrder',
'discounts' => '\Swagger\Client\Model\Discount[]',
'rate_offer_id' => 'string',
'meta' => '\Swagger\Client\Model\Meta'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'session_id' => 'uuid',
'state' => null,
'merchant_reference' => null,
'currency' => null,
'total_amount' => 'float',
'items' => null,
'auto_capture' => null,
'complete_url' => null,
'cancel_url' => null,
'via_agent' => null,
'billing_profile_id' => 'uuid',
'billing_profile_reference' => null,
'billing_profile' => null,
'shipping_details' => null,
'tax_amount' => null,
'order' => null,
'discounts' => null,
'rate_offer_id' => 'uuid',
'meta' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_id' => 'SessionId',
'state' => 'State',
'merchant_reference' => 'MerchantReference',
'currency' => 'Currency',
'total_amount' => 'TotalAmount',
'items' => 'Items',
'auto_capture' => 'AutoCapture',
'complete_url' => 'CompleteUrl',
'cancel_url' => 'CancelUrl',
'via_agent' => 'ViaAgent',
'billing_profile_id' => 'BillingProfileId',
'billing_profile_reference' => 'BillingProfileReference',
'billing_profile' => 'BillingProfile',
'shipping_details' => 'ShippingDetails',
'tax_amount' => 'TaxAmount',
'order' => 'Order',
'discounts' => 'Discounts',
'rate_offer_id' => 'RateOfferId',
'meta' => 'Meta'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_id' => 'setSessionId',
'state' => 'setState',
'merchant_reference' => 'setMerchantReference',
'currency' => 'setCurrency',
'total_amount' => 'setTotalAmount',
'items' => 'setItems',
'auto_capture' => 'setAutoCapture',
'complete_url' => 'setCompleteUrl',
'cancel_url' => 'setCancelUrl',
'via_agent' => 'setViaAgent',
'billing_profile_id' => 'setBillingProfileId',
'billing_profile_reference' => 'setBillingProfileReference',
'billing_profile' => 'setBillingProfile',
'shipping_details' => 'setShippingDetails',
'tax_amount' => 'setTaxAmount',
'order' => 'setOrder',
'discounts' => 'setDiscounts',
'rate_offer_id' => 'setRateOfferId',
'meta' => 'setMeta'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_id' => 'getSessionId',
'state' => 'getState',
'merchant_reference' => 'getMerchantReference',
'currency' => 'getCurrency',
'total_amount' => 'getTotalAmount',
'items' => 'getItems',
'auto_capture' => 'getAutoCapture',
'complete_url' => 'getCompleteUrl',
'cancel_url' => 'getCancelUrl',
'via_agent' => 'getViaAgent',
'billing_profile_id' => 'getBillingProfileId',
'billing_profile_reference' => 'getBillingProfileReference',
'billing_profile' => 'getBillingProfile',
'shipping_details' => 'getShippingDetails',
'tax_amount' => 'getTaxAmount',
'order' => 'getOrder',
'discounts' => 'getDiscounts',
'rate_offer_id' => 'getRateOfferId',
'meta' => 'getMeta'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_CREATED = 'CREATED';
const STATE_REDIRECTED = 'REDIRECTED';
const STATE_COMPLETED = 'COMPLETED';
const STATE_CANCELLED = 'CANCELLED';
const STATE_FAILED = 'FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_CREATED,
self::STATE_REDIRECTED,
self::STATE_COMPLETED,
self::STATE_CANCELLED,
self::STATE_FAILED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['merchant_reference'] = isset($data['merchant_reference']) ? $data['merchant_reference'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['auto_capture'] = isset($data['auto_capture']) ? $data['auto_capture'] : null;
        $this->container['complete_url'] = isset($data['complete_url']) ? $data['complete_url'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['via_agent'] = isset($data['via_agent']) ? $data['via_agent'] : null;
        $this->container['billing_profile_id'] = isset($data['billing_profile_id']) ? $data['billing_profile_id'] : null;
        $this->container['billing_profile_reference'] = isset($data['billing_profile_reference']) ? $data['billing_profile_reference'] : null;
        $this->container['billing_profile'] = isset($data['billing_profile']) ? $data['billing_profile'] : null;
        $this->container['shipping_details'] = isset($data['shipping_details']) ? $data['shipping_details'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['rate_offer_id'] = isset($data['rate_offer_id']) ? $data['rate_offer_id'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant_reference'] === null) {
            $invalidProperties[] = "'merchant_reference' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['auto_capture'] === null) {
            $invalidProperties[] = "'auto_capture' can't be null";
        }
        if ($this->container['complete_url'] === null) {
            $invalidProperties[] = "'complete_url' can't be null";
        }
        if ($this->container['cancel_url'] === null) {
            $invalidProperties[] = "'cancel_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id Returned UUID representing the Session
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Returned state of the Session.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets merchant_reference
     *
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->container['merchant_reference'];
    }

    /**
     * Sets merchant_reference
     *
     * @param string $merchant_reference Unique identifier provided by merchant.
     *
     * @return $this
     */
    public function setMerchantReference($merchant_reference)
    {
        $this->container['merchant_reference'] = $merchant_reference;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Three-character ISO-4217 currency code used to process the payment.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float $total_amount Sum of all item amounts, TaxAmount, ShippingDetails.ShippingAmount and ShippingDetails.DutyAmount, minus the total of all Discounts
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\Item[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\Item[] $items List of items to be paid. At least one Item must be supplied.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets auto_capture
     *
     * @return bool
     */
    public function getAutoCapture()
    {
        return $this->container['auto_capture'];
    }

    /**
     * Sets auto_capture
     *
     * @param bool $auto_capture Indicator used to determine if an Order is auto captured after authorization.
     *
     * @return $this
     */
    public function setAutoCapture($auto_capture)
    {
        $this->container['auto_capture'] = $auto_capture;

        return $this;
    }

    /**
     * Gets complete_url
     *
     * @return string
     */
    public function getCompleteUrl()
    {
        return $this->container['complete_url'];
    }

    /**
     * Sets complete_url
     *
     * @param string $complete_url Merchant URL to redirect a user to upon completion at a third party payment processor. This may contain \"{SessionId}\" anywhere in the string to have the SessionId embedded in the url.
     *
     * @return $this
     */
    public function setCompleteUrl($complete_url)
    {
        $this->container['complete_url'] = $complete_url;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url Merchant URL to redirect a user to after cancelling on a third party payment processor. This may contain \"{SessionId}\" anywhere in the string to have the SessionId embedded in the url.
     *
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets via_agent
     *
     * @return bool
     */
    public function getViaAgent()
    {
        return $this->container['via_agent'];
    }

    /**
     * Sets via_agent
     *
     * @param bool $via_agent Indicates that this Session is being made by an agent, and not the end consumer. If false or not present, the Session is assumed to be placed by the end consumer.
     *
     * @return $this
     */
    public function setViaAgent($via_agent)
    {
        $this->container['via_agent'] = $via_agent;

        return $this;
    }

    /**
     * Gets billing_profile_id
     *
     * @return string
     */
    public function getBillingProfileId()
    {
        return $this->container['billing_profile_id'];
    }

    /**
     * Sets billing_profile_id
     *
     * @param string $billing_profile_id Corresponds to the BillingProfileId returned in a BillingProfile. Can be passed in to reference an existing billing profile instead of creating a new one. Exactly one of BillingProfile, BillingProfileId or BillingprofileReference are required.
     *
     * @return $this
     */
    public function setBillingProfileId($billing_profile_id)
    {
        $this->container['billing_profile_id'] = $billing_profile_id;

        return $this;
    }

    /**
     * Gets billing_profile_reference
     *
     * @return string
     */
    public function getBillingProfileReference()
    {
        return $this->container['billing_profile_reference'];
    }

    /**
     * Sets billing_profile_reference
     *
     * @param string $billing_profile_reference Merchant supplied reference that uniquely maps to a BillingProfile. Can be passed in to reference an existing BillingProfile. Exactly one of BillingProfile, BillingProfileId or BillingprofileReference are required.
     *
     * @return $this
     */
    public function setBillingProfileReference($billing_profile_reference)
    {
        $this->container['billing_profile_reference'] = $billing_profile_reference;

        return $this;
    }

    /**
     * Gets billing_profile
     *
     * @return AllOfSessionBillingProfile
     */
    public function getBillingProfile()
    {
        return $this->container['billing_profile'];
    }

    /**
     * Sets billing_profile
     *
     * @param AllOfSessionBillingProfile $billing_profile Full consumer billing information. Supplying this creates a new BillingProfile that can be referenced in future requests with either the supplied BillingProfileReference or the generated BillingProfileId. Exactly one of BillingProfile, BillingProfileId or BillingprofileReference are required.
     *
     * @return $this
     */
    public function setBillingProfile($billing_profile)
    {
        $this->container['billing_profile'] = $billing_profile;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return AllOfSessionShippingDetails
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param AllOfSessionShippingDetails $shipping_details Consumer shipping information. Required if the session is for physical goods.
     *
     * @return $this
     */
    public function setShippingDetails($shipping_details)
    {
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float $tax_amount Taxes for the entire order. Currency is defined by parent object.
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets order
     *
     * @return AllOfSessionOrder
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param AllOfSessionOrder $order Order information, returned when a session is completed.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\Discount[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\Discount[] $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets rate_offer_id
     *
     * @return string
     */
    public function getRateOfferId()
    {
        return $this->container['rate_offer_id'];
    }

    /**
     * Sets rate_offer_id
     *
     * @param string $rate_offer_id The 36 character GUID for a guaranteed foreign exchange rate. If omitted, the rate will be determined at the time of settlement.
     *
     * @return $this
     */
    public function setRateOfferId($rate_offer_id)
    {
        $this->container['rate_offer_id'] = $rate_offer_id;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Swagger\Client\Model\Meta
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Swagger\Client\Model\Meta $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
