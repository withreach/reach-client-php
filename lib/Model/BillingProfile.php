<?php
/**
 * BillingProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Reach's Drop-In API
 *
 * API definition for Reach's Drop-In API's. This version of the OpenAPI is intended for use with code generation tools.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BillingProfile Class Doc Comment
 *
 * @category Class
 * @description Billing details associated with the payment. Some fields may be required or optional depending on the Country in BillingProfile.Address. See: https://docs.withreach.com/reference/country-specific-fields-1
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillingProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillingProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_profile_id' => 'string',
        'billing_profile_reference' => 'string',
        'name' => 'string',
        'company' => 'string',
        'email' => 'string',
        'address' => '\OpenAPI\Client\Model\Address',
        'phone' => 'string',
        'birthdate' => 'string',
        'national_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_profile_id' => null,
        'billing_profile_reference' => null,
        'name' => null,
        'company' => null,
        'email' => null,
        'address' => null,
        'phone' => null,
        'birthdate' => null,
        'national_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_profile_id' => 'BillingProfileId',
        'billing_profile_reference' => 'BillingProfileReference',
        'name' => 'Name',
        'company' => 'Company',
        'email' => 'Email',
        'address' => 'Address',
        'phone' => 'Phone',
        'birthdate' => 'Birthdate',
        'national_identifier' => 'NationalIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_profile_id' => 'setBillingProfileId',
        'billing_profile_reference' => 'setBillingProfileReference',
        'name' => 'setName',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'phone' => 'setPhone',
        'birthdate' => 'setBirthdate',
        'national_identifier' => 'setNationalIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_profile_id' => 'getBillingProfileId',
        'billing_profile_reference' => 'getBillingProfileReference',
        'name' => 'getName',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'phone' => 'getPhone',
        'birthdate' => 'getBirthdate',
        'national_identifier' => 'getNationalIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_profile_id'] = $data['billing_profile_id'] ?? null;
        $this->container['billing_profile_reference'] = $data['billing_profile_reference'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['national_identifier'] = $data['national_identifier'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['billing_profile_reference']) && (mb_strlen($this->container['billing_profile_reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'billing_profile_reference', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) < 1)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['birthdate']) && (mb_strlen($this->container['birthdate']) < 1)) {
            $invalidProperties[] = "invalid value for 'birthdate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['national_identifier']) && (mb_strlen($this->container['national_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'national_identifier', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_profile_id
     *
     * @return string|null
     */
    public function getBillingProfileId()
    {
        return $this->container['billing_profile_id'];
    }

    /**
     * Sets billing_profile_id
     *
     * @param string|null $billing_profile_id A UUID for a given BillingProfile object present in Reach. This can be used later to reference an existing consumer
     *
     * @return self
     */
    public function setBillingProfileId($billing_profile_id)
    {
        $this->container['billing_profile_id'] = $billing_profile_id;

        return $this;
    }

    /**
     * Gets billing_profile_reference
     *
     * @return string|null
     */
    public function getBillingProfileReference()
    {
        return $this->container['billing_profile_reference'];
    }

    /**
     * Sets billing_profile_reference
     *
     * @param string|null $billing_profile_reference A unique merchant-supplied consumer identifier. If supplied, this can be used later to reference an existing consumer.
     *
     * @return self
     */
    public function setBillingProfileReference($billing_profile_reference)
    {

        if (!is_null($billing_profile_reference) && (mb_strlen($billing_profile_reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_profile_reference when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['billing_profile_reference'] = $billing_profile_reference;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Customer’s given name.
     *
     * @return self
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Customer's company name.
     *
     * @return self
     */
    public function setCompany($company)
    {

        if (!is_null($company) && (mb_strlen($company) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Customer’s email address
     *
     * @return self
     */
    public function setEmail($email)
    {

        if ((mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\Address $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Customer's phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate Customer's birthdate (format yyyy-MM-dd). Required depending on the Country.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {

        if (!is_null($birthdate) && (mb_strlen($birthdate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $birthdate when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets national_identifier
     *
     * @return string|null
     */
    public function getNationalIdentifier()
    {
        return $this->container['national_identifier'];
    }

    /**
     * Sets national_identifier
     *
     * @param string|null $national_identifier National ID, such as SSN or CPF. Required depending on the Country.
     *
     * @return self
     */
    public function setNationalIdentifier($national_identifier)
    {

        if (!is_null($national_identifier) && (mb_strlen($national_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $national_identifier when calling BillingProfile., must be bigger than or equal to 1.');
        }

        $this->container['national_identifier'] = $national_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


