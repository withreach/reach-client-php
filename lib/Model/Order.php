<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Reach's Drop-In API
 *
 * API definition for Reach's Drop-In API's. This version of the OpenAPI is intended for use with code generation tools.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description A Reach order, representing a payment attempt. See https://docs.withreach.com/docs/states-and-events for information on the order lifecycle. If created by a session, the presence indicates the session is completed and the payment is being processed.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'state' => 'string',
        'merchant_reference' => 'string',
        'billing_profile' => '\OpenAPI\Client\Model\BillingProfile',
        'billing_profile_id' => 'string',
        'billing_profile_reference' => 'string',
        'currency' => 'string',
        'items' => '\OpenAPI\Client\Model\Item[]',
        'payment' => '\OpenAPI\Client\Model\Payment',
        'contract_id' => 'string',
        'device_fingerprint' => 'string',
        'discounts' => '\OpenAPI\Client\Model\Discount[]',
        'shipping_details' => '\OpenAPI\Client\Model\ShippingDetails',
        'tax_amount' => 'float',
        'via_agent' => 'bool',
        'accept_liability' => 'bool',
        'auto_capture' => 'bool',
        'open_contract' => 'bool',
        'meta' => 'object',
        'under_review' => 'bool',
        'chargeback' => 'bool',
        'reason' => 'string',
        'expiry' => 'string',
        'action' => '\OpenAPI\Client\Model\Action',
        'times' => '\OpenAPI\Client\Model\Times',
        'admin_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => 'uuid',
        'state' => null,
        'merchant_reference' => null,
        'billing_profile' => null,
        'billing_profile_id' => 'uuid',
        'billing_profile_reference' => null,
        'currency' => null,
        'items' => null,
        'payment' => null,
        'contract_id' => 'uuid',
        'device_fingerprint' => null,
        'discounts' => null,
        'shipping_details' => null,
        'tax_amount' => null,
        'via_agent' => null,
        'accept_liability' => null,
        'auto_capture' => null,
        'open_contract' => null,
        'meta' => null,
        'under_review' => null,
        'chargeback' => null,
        'reason' => null,
        'expiry' => null,
        'action' => null,
        'times' => null,
        'admin_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'state' => 'State',
        'merchant_reference' => 'MerchantReference',
        'billing_profile' => 'BillingProfile',
        'billing_profile_id' => 'BillingProfileId',
        'billing_profile_reference' => 'BillingProfileReference',
        'currency' => 'Currency',
        'items' => 'Items',
        'payment' => 'Payment',
        'contract_id' => 'ContractId',
        'device_fingerprint' => 'DeviceFingerprint',
        'discounts' => 'Discounts',
        'shipping_details' => 'ShippingDetails',
        'tax_amount' => 'TaxAmount',
        'via_agent' => 'ViaAgent',
        'accept_liability' => 'AcceptLiability',
        'auto_capture' => 'AutoCapture',
        'open_contract' => 'OpenContract',
        'meta' => 'Meta',
        'under_review' => 'UnderReview',
        'chargeback' => 'Chargeback',
        'reason' => 'Reason',
        'expiry' => 'Expiry',
        'action' => 'Action',
        'times' => 'Times',
        'admin_url' => 'AdminUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'state' => 'setState',
        'merchant_reference' => 'setMerchantReference',
        'billing_profile' => 'setBillingProfile',
        'billing_profile_id' => 'setBillingProfileId',
        'billing_profile_reference' => 'setBillingProfileReference',
        'currency' => 'setCurrency',
        'items' => 'setItems',
        'payment' => 'setPayment',
        'contract_id' => 'setContractId',
        'device_fingerprint' => 'setDeviceFingerprint',
        'discounts' => 'setDiscounts',
        'shipping_details' => 'setShippingDetails',
        'tax_amount' => 'setTaxAmount',
        'via_agent' => 'setViaAgent',
        'accept_liability' => 'setAcceptLiability',
        'auto_capture' => 'setAutoCapture',
        'open_contract' => 'setOpenContract',
        'meta' => 'setMeta',
        'under_review' => 'setUnderReview',
        'chargeback' => 'setChargeback',
        'reason' => 'setReason',
        'expiry' => 'setExpiry',
        'action' => 'setAction',
        'times' => 'setTimes',
        'admin_url' => 'setAdminUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'state' => 'getState',
        'merchant_reference' => 'getMerchantReference',
        'billing_profile' => 'getBillingProfile',
        'billing_profile_id' => 'getBillingProfileId',
        'billing_profile_reference' => 'getBillingProfileReference',
        'currency' => 'getCurrency',
        'items' => 'getItems',
        'payment' => 'getPayment',
        'contract_id' => 'getContractId',
        'device_fingerprint' => 'getDeviceFingerprint',
        'discounts' => 'getDiscounts',
        'shipping_details' => 'getShippingDetails',
        'tax_amount' => 'getTaxAmount',
        'via_agent' => 'getViaAgent',
        'accept_liability' => 'getAcceptLiability',
        'auto_capture' => 'getAutoCapture',
        'open_contract' => 'getOpenContract',
        'meta' => 'getMeta',
        'under_review' => 'getUnderReview',
        'chargeback' => 'getChargeback',
        'reason' => 'getReason',
        'expiry' => 'getExpiry',
        'action' => 'getAction',
        'times' => 'getTimes',
        'admin_url' => 'getAdminUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_AUTHENTICATING = 'AUTHENTICATING';
    public const STATE_PENDING = 'PENDING';
    public const STATE_PROCESSING = 'PROCESSING';
    public const STATE_PAYMENTAUTHORIZED = 'PAYMENTAUTHORIZED';
    public const STATE_PROCESSED = 'PROCESSED';
    public const STATE_PROCESSINGFAILED = 'PROCESSINGFAILED';
    public const STATE_CANCELLED = 'CANCELLED';
    public const STATE_DECLINED = 'DECLINED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_AUTHENTICATING,
            self::STATE_PENDING,
            self::STATE_PROCESSING,
            self::STATE_PAYMENTAUTHORIZED,
            self::STATE_PROCESSED,
            self::STATE_PROCESSINGFAILED,
            self::STATE_CANCELLED,
            self::STATE_DECLINED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['merchant_reference'] = $data['merchant_reference'] ?? null;
        $this->container['billing_profile'] = $data['billing_profile'] ?? null;
        $this->container['billing_profile_id'] = $data['billing_profile_id'] ?? null;
        $this->container['billing_profile_reference'] = $data['billing_profile_reference'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['payment'] = $data['payment'] ?? null;
        $this->container['contract_id'] = $data['contract_id'] ?? null;
        $this->container['device_fingerprint'] = $data['device_fingerprint'] ?? null;
        $this->container['discounts'] = $data['discounts'] ?? null;
        $this->container['shipping_details'] = $data['shipping_details'] ?? null;
        $this->container['tax_amount'] = $data['tax_amount'] ?? null;
        $this->container['via_agent'] = $data['via_agent'] ?? null;
        $this->container['accept_liability'] = $data['accept_liability'] ?? null;
        $this->container['auto_capture'] = $data['auto_capture'] ?? null;
        $this->container['open_contract'] = $data['open_contract'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
        $this->container['under_review'] = $data['under_review'] ?? null;
        $this->container['chargeback'] = $data['chargeback'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
        $this->container['expiry'] = $data['expiry'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['times'] = $data['times'] ?? null;
        $this->container['admin_url'] = $data['admin_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ((mb_strlen($this->container['order_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['order_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be bigger than or equal to 36.";
        }

        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $this->container['order_id'])) {
            $invalidProperties[] = "invalid value for 'order_id', must be conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant_reference'] === null) {
            $invalidProperties[] = "'merchant_reference' can't be null";
        }
        if ((mb_strlen($this->container['merchant_reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'merchant_reference', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['billing_profile_id']) && (mb_strlen($this->container['billing_profile_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'billing_profile_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['billing_profile_id']) && (mb_strlen($this->container['billing_profile_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'billing_profile_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['billing_profile_id']) && !preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $this->container['billing_profile_id'])) {
            $invalidProperties[] = "invalid value for 'billing_profile_id', must be conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.";
        }

        if (!is_null($this->container['contract_id']) && (mb_strlen($this->container['contract_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'contract_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['contract_id']) && (mb_strlen($this->container['contract_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'contract_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['contract_id']) && !preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $this->container['contract_id'])) {
            $invalidProperties[] = "invalid value for 'contract_id', must be conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id UUID identifying the individual Order.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if ((mb_strlen($order_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling Order., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($order_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling Order., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $order_id))) {
            throw new \InvalidArgumentException("invalid value for $order_id when calling Order., must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Order state. See: https://docs.withreach.com/docs/states-and-events
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets merchant_reference
     *
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->container['merchant_reference'];
    }

    /**
     * Sets merchant_reference
     *
     * @param string $merchant_reference Unique identifier provided by merchant.
     *
     * @return self
     */
    public function setMerchantReference($merchant_reference)
    {

        if ((mb_strlen($merchant_reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference when calling Order., must be bigger than or equal to 1.');
        }

        $this->container['merchant_reference'] = $merchant_reference;

        return $this;
    }

    /**
     * Gets billing_profile
     *
     * @return \OpenAPI\Client\Model\BillingProfile|null
     */
    public function getBillingProfile()
    {
        return $this->container['billing_profile'];
    }

    /**
     * Sets billing_profile
     *
     * @param \OpenAPI\Client\Model\BillingProfile|null $billing_profile billing_profile
     *
     * @return self
     */
    public function setBillingProfile($billing_profile)
    {
        $this->container['billing_profile'] = $billing_profile;

        return $this;
    }

    /**
     * Gets billing_profile_id
     *
     * @return string|null
     */
    public function getBillingProfileId()
    {
        return $this->container['billing_profile_id'];
    }

    /**
     * Sets billing_profile_id
     *
     * @param string|null $billing_profile_id Corresponds to the BillingProfileId returned in a BillingProfile. Can be passed in to reference an existing billing profile instead of creating a new one. Exactly one of BillingProfile, BillingProfileId or BillingprofileReference are required.
     *
     * @return self
     */
    public function setBillingProfileId($billing_profile_id)
    {
        if (!is_null($billing_profile_id) && (mb_strlen($billing_profile_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $billing_profile_id when calling Order., must be smaller than or equal to 36.');
        }
        if (!is_null($billing_profile_id) && (mb_strlen($billing_profile_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $billing_profile_id when calling Order., must be bigger than or equal to 36.');
        }
        if (!is_null($billing_profile_id) && (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $billing_profile_id))) {
            throw new \InvalidArgumentException("invalid value for $billing_profile_id when calling Order., must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }

        $this->container['billing_profile_id'] = $billing_profile_id;

        return $this;
    }

    /**
     * Gets billing_profile_reference
     *
     * @return string|null
     */
    public function getBillingProfileReference()
    {
        return $this->container['billing_profile_reference'];
    }

    /**
     * Sets billing_profile_reference
     *
     * @param string|null $billing_profile_reference Merchant supplied reference that uniquely maps to a BillingProfile. Can be passed in to reference an existing BillingProfile. Exactly one of BillingProfile, BillingProfileId or BillingprofileReference are required.
     *
     * @return self
     */
    public function setBillingProfileReference($billing_profile_reference)
    {
        $this->container['billing_profile_reference'] = $billing_profile_reference;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Three-character ISO-4217 currency code used to process the payment.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\Item[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\Item[]|null $items List of items to be paid. At least one Item must be supplied in requests. The sum total of the item amounts will be added to the TotalAmount
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Model\Payment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Model\Payment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string|null $contract_id Reach-generated ID of an existing contract. Can be supplied in lieu of a Payment object. Will be returned in the response if OpenContract is set to true.
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        if (!is_null($contract_id) && (mb_strlen($contract_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $contract_id when calling Order., must be smaller than or equal to 36.');
        }
        if (!is_null($contract_id) && (mb_strlen($contract_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $contract_id when calling Order., must be bigger than or equal to 36.');
        }
        if (!is_null($contract_id) && (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $contract_id))) {
            throw new \InvalidArgumentException("invalid value for $contract_id when calling Order., must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }

        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets device_fingerprint
     *
     * @return string|null
     */
    public function getDeviceFingerprint()
    {
        return $this->container['device_fingerprint'];
    }

    /**
     * Sets device_fingerprint
     *
     * @param string|null $device_fingerprint Device fingerprint - see https://docs.withreach.com/reference/fingerprint-1
     *
     * @return self
     */
    public function setDeviceFingerprint($device_fingerprint)
    {
        $this->container['device_fingerprint'] = $device_fingerprint;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \OpenAPI\Client\Model\Discount[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \OpenAPI\Client\Model\Discount[]|null $discounts List of discounts. The sum of the discounts amounts will be subtracted from the TotalAmount
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return \OpenAPI\Client\Model\ShippingDetails|null
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param \OpenAPI\Client\Model\ShippingDetails|null $shipping_details shipping_details
     *
     * @return self
     */
    public function setShippingDetails($shipping_details)
    {
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount Tax to be applied to the order. In the consumer currency, max precision of 2 digits. TaxAmount will be added to the TotalAmount.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets via_agent
     *
     * @return bool|null
     */
    public function getViaAgent()
    {
        return $this->container['via_agent'];
    }

    /**
     * Sets via_agent
     *
     * @param bool|null $via_agent Indicates that this order is being made by an agent, and not the end consumer. If false or not present, the order is assumed to be placed by the end consumer.
     *
     * @return self
     */
    public function setViaAgent($via_agent)
    {
        $this->container['via_agent'] = $via_agent;

        return $this;
    }

    /**
     * Gets accept_liability
     *
     * @return bool|null
     */
    public function getAcceptLiability()
    {
        return $this->container['accept_liability'];
    }

    /**
     * Sets accept_liability
     *
     * @param bool|null $accept_liability If true, the merchant accepts financial liability for this order.
     *
     * @return self
     */
    public function setAcceptLiability($accept_liability)
    {
        $this->container['accept_liability'] = $accept_liability;

        return $this;
    }

    /**
     * Gets auto_capture
     *
     * @return bool|null
     */
    public function getAutoCapture()
    {
        return $this->container['auto_capture'];
    }

    /**
     * Sets auto_capture
     *
     * @param bool|null $auto_capture If true or the payment method used by the consumer does not support pre-authorization, the payment will be completed. If false or not present, and the payment method supports pre-authorization, the order will be left in the PaymentAuthorized state and the merchant must capture the order using a capture request.
     *
     * @return self
     */
    public function setAutoCapture($auto_capture)
    {
        $this->container['auto_capture'] = $auto_capture;

        return $this;
    }

    /**
     * Gets open_contract
     *
     * @return bool|null
     */
    public function getOpenContract()
    {
        return $this->container['open_contract'];
    }

    /**
     * Sets open_contract
     *
     * @param bool|null $open_contract If true, a contract (used for recurring billing, subscriptions, stored payment options, etc.) will be opened if possible. If false or not present, the order will not open a contract.
     *
     * @return self
     */
    public function setOpenContract($open_contract)
    {
        $this->container['open_contract'] = $open_contract;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object|null $meta Any optional metadata to be included. Can be a simple reference ID or some complex object containing multiple values, as long as it is valid JSON.
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets under_review
     *
     * @return bool|null
     */
    public function getUnderReview()
    {
        return $this->container['under_review'];
    }

    /**
     * Sets under_review
     *
     * @param bool|null $under_review This will be returned as true if a fraud review is in progress for the order. Payment cannot be processed until the review has been completed.
     *
     * @return self
     */
    public function setUnderReview($under_review)
    {
        $this->container['under_review'] = $under_review;

        return $this;
    }

    /**
     * Gets chargeback
     *
     * @return bool|null
     */
    public function getChargeback()
    {
        return $this->container['chargeback'];
    }

    /**
     * Sets chargeback
     *
     * @param bool|null $chargeback This will be returned as true if a chargeback has been issued against the order. An outstanding chargeback disables the ability to submit a refund against the order.
     *
     * @return self
     */
    public function setChargeback($chargeback)
    {
        $this->container['chargeback'] = $chargeback;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Gives a reason for an order to be in a given state.
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string|null
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string|null $expiry If the order was created with Capture false, and the payment is authorized, the RFC 3339 time at which this order expires. If further authentication is required, this is the time by which that authentication must be completed.
     *
     * @return self
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \OpenAPI\Client\Model\Action|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \OpenAPI\Client\Model\Action|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets times
     *
     * @return \OpenAPI\Client\Model\Times|null
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param \OpenAPI\Client\Model\Times|null $times times
     *
     * @return self
     */
    public function setTimes($times)
    {
        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets admin_url
     *
     * @return string|null
     */
    public function getAdminUrl()
    {
        return $this->container['admin_url'];
    }

    /**
     * Sets admin_url
     *
     * @param string|null $admin_url A link to this order in the Reach admin app. You must have valid credentials to view
     *
     * @return self
     */
    public function setAdminUrl($admin_url)
    {
        $this->container['admin_url'] = $admin_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


